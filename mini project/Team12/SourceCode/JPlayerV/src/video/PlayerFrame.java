package video;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlayerFrame.java
 *
 * Created on 2014年3月10日, 上午06:12:51
 */
/**
 *
 * @author User
 */
    import java.awt.*;
    import java.awt.event.WindowAdapter;
    import java.awt.event.WindowEvent;
    import java.io.File;
    import java.io.IOException;
    import java.util.logging.Level;
    import java.util.logging.Logger;
    import javax.media.CannotRealizeException;
    import javax.media.Manager;
    import javax.media.NoPlayerException;
    import javax.media.Time;
    import javax.sound.sampled.LineUnavailableException;
    import javax.swing.JPanel;
    import javax.swing.JFrame;
    import javax.swing.JSlider;
    import javax.swing.event.ChangeListener;
    import javax.swing.event.ChangeEvent;
    import java.awt.FlowLayout;
    import java.awt.Font;
    import java.awt.GridLayout;
    import java.awt.event.ActionEvent;
    import java.awt.event.ActionListener;

import java.awt.event.MouseEvent;
import java.util.Timer;
import java.util.TimerTask;
import javax.sound.sampled.FloatControl;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
     
public class PlayerFrame extends javax.swing.JFrame {

    /** Creates new form PlayerFrame */
    private static final long serialVersionUID = 1L;
    public static int width = 500;
    public static int height = 500;
    public static boolean isDragging = false;
    private static Timer timerPlay;
    public PlayerFrame(String path) throws CannotRealizeException, LineUnavailableException {
        super(new File(path).getName());
//        super(getFileName());

//        setLayout(new BorderLayout());
//                PlayerPanel.controllerUpdate();
        
//		setSize(width, height);
		addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent evt){
				System.exit(0);
			}
		});
		
		setContentPane(new PlayerPanel(path));
               initComponents();
                
                height += 70;
                System.out.println(width+" "+height);
                setSize(width, height);
                setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - getWidth())/2, (Toolkit.getDefaultToolkit().getScreenSize().height - getHeight())/2);
//                sliderPlayBack.setLocation(0,height+2);
                sliderPlayBack.setBounds(0, height+2, width*3/4-2, 23);
//                int w = sliderPlayBack.getWidth();
//                sliderVol.setLocation(w*3/4 + 2,height+2);
                sliderVol.setBounds(width*3/4, height+2, width*1/4-2, 23);

		setVisible(true);
                

        
        //file you want to play
/*        URL mediaURL = C:\Users\User\Desktop\csci3280\The_Over.mp4;
        //create the media player with the media url
        PlayerFrame mediaPlayer = Manager.createRealizedPlayer(mediaURL);
        //get components for video and playback controls
        Component video = mediaPlayer.getVisualComponent();
        Component controls = mediaPlayer.getControlPanelComponent();
        add(video,BorderLayout.CENTER);
        add(controls,BorderLayout.SOUTH);*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sliderPlayBack = new javax.swing.JSlider();
        sliderVol = new javax.swing.JSlider();
        Play = new javax.swing.JButton();
        Stop = new javax.swing.JButton();
        Pause = new javax.swing.JButton();

        sliderPlayBack.setMaximum(100000);
        sliderPlayBack.setValue(0);

        sliderVol.setMaximum(35);
        sliderVol.setMinimum(-35);
        sliderVol.setPaintTicks(true);
        sliderVol.setValue(0);

        Play.setText("P");
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });

        Stop.setText("S");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        Pause.setText("Pa");
        Pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Pause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Play)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Stop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderPlayBack, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderVol, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(259, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderPlayBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Play)
                        .addComponent(Stop)
                        .addComponent(Pause))
                    .addComponent(sliderVol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        // TODO add your handling code here:
        PlayerPanel.player.start();
        Play.setVisible(false);
        Pause.setVisible(true);
    }//GEN-LAST:event_PlayActionPerformed

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        // TODO add your handling code here:
        PlayerPanel.player.stop();
        PlayerPanel.player.setMediaTime(new javax.media.Time((long)0));
        sliderPlayBack.setValue(Math.round(0));
        PlayerFrame.setDefaultLookAndFeelDecorated(false);
        HelloWorldBuild.btnPlay.setVisible(true);
    }//GEN-LAST:event_StopActionPerformed

    private void PauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseActionPerformed
        // TODO add your handling code here:
        PlayerPanel.player.stop();
        Pause.setVisible(false);
        Play.setVisible(true);
        HelloWorldBuild.btnPlay.setVisible(true);
    }//GEN-LAST:event_PauseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String path) throws CannotRealizeException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        System.out.println("BYE");

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
//        new PlayerFrame(path);
        java.awt.EventQueue.invokeLater(new Runnable() {
        @Override
            public void run() {
                    try {
                        new PlayerFrame(path).setVisible(true);
                    } catch (CannotRealizeException ex) {
                        Logger.getLogger(PlayerFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (LineUnavailableException ex) {
                        Logger.getLogger(PlayerFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    sliderVol.setName("sliderVol");
                    sliderVol.addChangeListener(new ChangeListener() {
                        @Override
                        public void stateChanged(ChangeEvent e) {
                            float dB = (float)PlayerFrame.sliderVol.getValue();
//                            float dB = (float)temp / (float)50;
//                            float dB = (float)(Math.log(value)/Math.log(10.0)*20.0) + PlayerPanel.player.getGainControl().getDB();
//                            System.out.println("Volume "+dB);
                            if(dB == sliderVol.getMinimum())//set Mute at minimum
                                PlayerPanel.player.getGainControl().setMute(true);
                            else
                                PlayerPanel.player.getGainControl().setMute(false);
                                PlayerPanel.player.getGainControl().setDB(dB);
//                            FloatControl gain = (FloatControl)PlayerPanel.videofile.getControl(FloatControl.Type.MASTER_GAIN);
//                            gain.setValue(dB);
//                            throw new UnsupportedOperationException("Not supported yet.");
                        }
                    });

		sliderPlayBack.setName("sliderPlayBack");
                sliderPlayBack.addComponentListener(null);
                sliderPlayBack.addChangeListener(new ChangeListener() {
                        @Override
                        public void stateChanged(ChangeEvent e) {
//                            isDragging = true;
/*                            Time progress = PlayerPanel.player.getMediaTime();
                            long p_i = progress.getNanoseconds();
                            float value = (float)p_i/(float)PlayerPanel.duration*(float)100000;
                            sliderPlayBack.setValue(Math.round(value));*/
                        }
                    });
		sliderPlayBack.addMouseListener(new java.awt.event.MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e){
                        isDragging = true;
                    }
                    @Override
                    public void mouseReleased(MouseEvent e){
                        long value = sliderPlayBack.getValue();
//                            System.out.println("Value " + value);
                        float s_t = (float)value / (float)sliderPlayBack.getMaximum() * (float)PlayerPanel.duration;
                        System.out.println("Start time " + (long)s_t);
                        Time temp = new javax.media.Time((long)s_t);

                        PlayerPanel.player.stop();
                        PlayerPanel.player.setMediaTime(temp);
                        PlayerPanel.player.start();
                        isDragging = false;
                    }
                });
                Play.setBounds(0, 0, 43, 23);
                Play.setVisible(false);
                Pause.setBounds(0, 0, 43, 23);
//                System.out.println("HII");
                PlayerFrame.sliderPlayBack.setValue(Math.round(0));
//                  System.out.println("   NEW   " + value);
                            if(isDragging == false){
//                               long progress = PlayerPanel.player.getMediaNanoseconds();
//                               float value = (float)progress/(float)PlayerPanel.duration*(float)100000;
//                               PlayerFrame.sliderPlayBack.setValue(Math.round(value));
				timerPlay = new Timer();
				ClipTimerTask ttPlay = new ClipTimerTask();
				timerPlay.schedule(ttPlay, 0, 100);
                            }

            }
        });
    }

    private static void updateUI(){
        Time progress = PlayerPanel.player.getMediaTime();
        long p_i = progress.getNanoseconds();
        float value = (float)p_i/(float)PlayerPanel.duration*(float)100000;
        PlayerFrame.sliderPlayBack.setValue(Math.round(value));
//        System.out.println("   NEW   " + value);
        updateUI();
    }
    public static class ClipTimerTask extends TimerTask{
//       sliderPlayBack.setValue((int)amp);
        @Override
        public void run() {       
            if(!isDragging){
                long progress = PlayerPanel.player.getMediaNanoseconds();
                float value = (float)progress/(float)PlayerPanel.duration*(float)100000;
                PlayerFrame.sliderPlayBack.setValue(Math.round(value));
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton Pause;
    public static javax.swing.JButton Play;
    private javax.swing.JButton Stop;
    public static javax.swing.JSlider sliderPlayBack;
    public static javax.swing.JSlider sliderVol;
    // End of variables declaration//GEN-END:variables
}

